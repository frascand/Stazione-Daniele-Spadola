#include <ArduinoOTA.h>  //https://github.com/jandrassy/ArduinoOTA

float tipCount1h ;   // bucket tip counter used in interrupt routine
float tipCount24h ;  // bucket tip counter used in interrupt routine  
unsigned int counter = 15;
volatile unsigned long contactTime;


//--------------------------------Wind  speed----------------------------------------
int WindSensorPin = D5;               // Wind speed -ILS sensor (anemometer) GPIO 14
volatile unsigned long Rotations;     // cup rotation counter used in interrupt routine
volatile unsigned long ContactBounceTime;  // Timer to avoid contact bounce in interrupt routine

float windSpeed = 0;     // Wind speed (mph)
float wind_speed_min = 100; // Minimum wind speed (mph)
float wind_speed_avg;    // 10 minutes average wind speed ( mph)
float windgustmph = 0;   // Wind gust speed( mph)
float windmax = 0;

void setup(){
  Serial.begin(9600);
  Rotations = 0;   // Set Rotations to 0 ready for calculations
 
  wind_speed_min=100;
  pinMode(WindSensorPin, INPUT);
  attachInterrupt(digitalPinToInterrupt(WindSensorPin), isr_rotation, FALLING);  // change if low to high >> RISING
  sei();
  ArduinoOTA.setHostname("NodeMCU_weather_station");
  ArduinoOTA.onStart([]() {
    Serial.println("Start");
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR) Serial.println("End Failed");
  });
  ArduinoOTA.begin();
  Serial.println("Collecting data from sensors");
}
void loop(){
  getWindSpeed();
 isr_rotation();
}
void getWindSpeed(void)
  {
 
     Rotations = 0; // Set Rotations count to 0 ready for calculations
     //sei(); // Enables interrupts
     ArduinoOTA.handle();
     delay (5000); // Wait 5 seconds to average wind speed
     ArduinoOTA.handle();
     delay (5000); // Wait 5 sedconds to average wind speed
     ArduinoOTA.handle();
     delay (5000); // Wait 5 seconds to average wind speed
     ArduinoOTA.handle();
     delay (5000); // Wait 5 seconds to average wind speed
     ArduinoOTA.handle();
     delay (5000); // Wait 5 seconds to average wind speed
     ArduinoOTA.handle();
     delay (5000); // Wait 5 seconds to average wind speed
     //cli(); // Disable interrupts
     
     /* convert to mp/h using the formula V=P(2.25/T)
      V = P(2.25/30) = P * 0.075       V - speed in mph,  P - pulses per sample period, T - sample period in seconds */
     windSpeed = Rotations * 0.15; // 30 seconds
     Rotations = 0;   // Reset count for next sample
     
  if (windSpeed > windgustmph) {
     windgustmph = windSpeed;
}
 if (wind_speed_min > windSpeed ) {
     wind_speed_min = windSpeed;
}

 wind_speed_avg = (windgustmph + wind_speed_min) * 0.5;   // average wind speed mph per 10 minutes
 
}

// This is the function that the interrupt calls to increment the rotation count
//-------------------------------------------------------------------------------------------------------------
////////////////////////////////////ISR rotation//////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------------------------------------------
void isr_rotation(void)   
{
  if ((millis() - ContactBounceTime) > 30 ) {  // debounce the switch contact.
    Rotations++;
    ContactBounceTime = millis();
  }
}
// Convert MPH to Knots
float getKnots(float speed) {
   return speed * 0.868976;          //knots 0.868976;
}
// Convert MPH to m/s
float getms(float speed) {
   return speed * 0.44704;           //metric m/s 0.44704;;
}
